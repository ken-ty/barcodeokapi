def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion  33
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "dev.kenty.barcodeokapi"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-build-configuration.
        minSdkVersion 21
        // ChatGPT さんの回答
        // compileSdkVersionは、開発者がアプリケーションをコンパイルするために使用する Android SDK のバージョンを指定するために使用されます。一方、アプリの動作保証は、ターゲットとする Android プラットフォームのバージョン、つまりtargetSdkVersionによって決定されます。
        // compileSdkVersionには、主にアプリをビルドするためのツールやAPIが含まれています。これには、JavaやKotlinなどの開発言語のサポート、ビルドツール、ライブラリ、およびAPIが含まれます。compileSdkVersionを上げると、新しい開発ツールやAPIが使用できるようになり、開発者はより最新の開発環境を利用することができます。ただし、これらの新しいAPIや開発ツールが利用できるようになっても、古いバージョンのAndroid OSを搭載した端末でのアプリの動作が保証されるわけではありません。
        // 一方、targetSdkVersionは、開発者がアプリが動作するAndroidの最小バージョンを指定するために使用されます。targetSdkVersionを上げると、アプリが古いバージョンのAndroid OSでも正常に動作することができるようになります。targetSdkVersionを上げることは、アプリの機能性や動作に影響する可能性があるため、慎重に行う必要があります。ただし、targetSdkVersionを上げることで、Google Playストアなどでのアプリの信頼性が高くなることがあります。
        // つまり、compileSdkVersionは、開発者がアプリをビルドするための開発ツールやAPIのバージョンを指定するために使用され、アプリの動作保証とは直接関係がありません。一方、targetSdkVersionは、アプリが動作するAndroid OSの最小バージョンを指定するために使用され、アプリの動作保証に影響を与える重要なパラメータの1つです。
        //
        // Google Play Console さんのエラー文言
        // 現在、お客様のアプリは API レベル 30 を対象にしています。セキュリティとパフォーマンスが最適化された最新の
        // API を利用するには、API レベル 31 以上を対象にする必要があります。アプリの対象 API レベルを 31 以上に変更してください。
        targetSdkVersion 31
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
